(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{558:function(t,e,v){t.exports=v.p+"assets/img/1.819732dd.png"},559:function(t,e,v){t.exports=v.p+"assets/img/2.53a503a9.png"},560:function(t,e,v){t.exports=v.p+"assets/img/4.b06278e8.png"},561:function(t,e,v){t.exports=v.p+"assets/img/5.2f3db634.png"},562:function(t,e,v){t.exports=v.p+"assets/img/6.1d454811.png"},563:function(t,e,v){t.exports=v.p+"assets/img/7.923d3301.png"},732:function(t,e,v){"use strict";v.r(e);var i=v(6),_=Object(i.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("新年（阳历）将近，预祝大家新年快乐，多发论文！今天我给大家带来了来自 "),i("em",[t._v("S&P 2020")]),t._v(" 的文章《RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization》。")]),t._v(" "),i("p",[i("img",{attrs:{src:v(558),alt:""}})]),t._v(" "),i("p",[t._v("作者们发现当前二进制的测试方法有以下三种：")]),t._v(" "),i("ol",[i("li",[t._v("采用黑盒 fuzzing")]),t._v(" "),i("li",[t._v("依赖动态二进制翻译")]),t._v(" "),i("li",[t._v("使用启发式的不可靠的静态重写")])]),t._v(" "),i("p",[t._v("而静态重写困难在于消除引用和标量常量的歧义。当前的二进制重写有以下三种技术：")]),t._v(" "),i("ol",[i("li",[t._v("重编译，会将代码提升到 IR 级别")]),t._v(" "),i("li",[t._v("蹦床（trampolines），会插入间接代码段而不改变基本块的大小")]),t._v(" "),i("li",[t._v("可重汇编的汇编，会创建一个等效于编译器发出（emit）的程序集的文件")])]),t._v(" "),i("p",[t._v("本文利用了 64 位的位置无关代码（PIC）所需的重定位信息生成可重汇编的汇编文件。为了证明他们的方法的可靠性，他们还利用了 fuzzer 进行测试。他们对 fuzz 二进制的需求也很明确：")]),t._v(" "),i("ol",[i("li",[t._v("为了最大化 fuzzer 吞吐量，需要一种机制生成与编译时插入指令性能相同的插入指令的二进制文件。")]),t._v(" "),i("li",[t._v("二进制重写和预期效果应保持一致，并且可以扩展支持真实世界的用例。")])]),t._v(" "),i("p",[t._v("总的来说他们的贡献如下：")]),t._v(" "),i("ul",[i("li",[t._v("一种对 64 位 PIC 二进制文件进行重写的框架")]),t._v(" "),i("li",[t._v("一种插桩方法，让二进制文件的运行性能和基于编译器的 AFL 的插桩相同")]),t._v(" "),i("li",[t._v("一种通过 ASAN check 改进二进制文件的插桩方法，使二进制的内存安全分析效率提高了三个数量级")]),t._v(" "),i("li",[t._v("全面评估 ASAN 和 AFL 插桩，并讨论其局限性")])]),t._v(" "),i("p",[t._v("在实现中，他们认为一个理想的重写器应该拥有以下三个特性：")]),t._v(" "),i("ol",[i("li",[i("strong",[t._v("性能")]),t._v(" 使用工具重编译时，运行时和开销较低。")]),t._v(" "),i("li",[i("strong",[t._v("准确性")]),t._v(" 保留原始程序的特征。")]),t._v(" "),i("li",[i("strong",[t._v("可扩展性")]),t._v(" 可以扩展到真实的软件上。")])]),t._v(" "),i("p",[t._v("他们设计了一种重写方法 RetroWrite，如下所示。")]),t._v(" "),i("p",[i("img",{attrs:{src:v(559),alt:""}})]),t._v(" "),i("p",[t._v("他们的方法分为五步：")]),t._v(" "),i("ol",[i("li",[t._v("预处理：这一步会加载例如 text 和 data 等 sections。还会加载符号和重定位信息，以及通过线性扫描反汇编并生成 CFG。")]),t._v(" "),i("li",[t._v("符号化：这一步使用加载阶段的重定位信息和恢复的 CFG 识别数据段和代码段的符号常数，并把它们转化为汇编器的标签。这一步结束时 RetroWrite 会输出可重汇编的汇编。")]),t._v(" "),i("li",[t._v("插桩操作（Instrumentation Passes）：通过对可重汇编的汇编进行操作修改二进制文件。")]),t._v(" "),i("li",[t._v("插桩优化")]),t._v(" "),i("li",[t._v("重汇编：生成一个插桩的汇编文件")])]),t._v(" "),i("p",[t._v("其中符号化的过程是他们方法的核心。他们在三个阶段进行了符号化。")]),t._v(" "),i("ol",[i("li",[i("strong",[t._v("控制流符号化")]),t._v(" 将控制流指令（call 和 jmp），也就是代码与代码（c2c）的引用转换为汇编程序的标签。")]),t._v(" "),i("li",[i("strong",[t._v("pc 相对寻址")]),t._v(" PIC 引用的是相对地址，因此可以将其转换为标签，包含了代码对代码和代码对数据（c2d）的引用。")]),t._v(" "),i("li",[i("strong",[t._v("数据重定位")]),t._v(" 这一步还是利用了 PIC 程序中一切都是相对的这一特性，将重定位项转换为标签。这一步包含了数据到数据（d2d）和数据到代码（d2c）的引用。")])]),t._v(" "),i("p",[t._v("由于他们针对的是 64 位的 PIC 二进制文件，因此他们的方法实质上是利用了其中的偏移，这也是他们的方法与现有的启发式的方法不同的原因，也显然是有局限性的。")]),t._v(" "),i("p",[t._v("之后他们实现了基于此方法的 ASan 和 AFL，并在实验中取得了不错的效果。他们对以下四个方面进行了实验：")]),t._v(" "),i("ol",[i("li",[t._v("RetroWrite 是否支持大型文件？")]),t._v(" "),i("li",[t._v("是否在运行时开销和覆盖率等方面改善了当前的二进制内存检查器？")]),t._v(" "),i("li",[t._v("能否在运行时开销和覆盖率方面和基于源代码的内存损坏检测器（memory corruption detectors）竞争？")]),t._v(" "),i("li",[t._v("与基于源代码的 AFL 插桩工具相比的覆盖率如何？是否能替代基于 QEMU 的 AFL 插桩？")])]),t._v(" "),i("img",{staticStyle:{zoom:"50%"},attrs:{src:v(560)}}),t._v(" "),i("img",{staticStyle:{zoom:"67%"},attrs:{src:v(561)}}),t._v(" "),i("img",{staticStyle:{zoom:"67%"},attrs:{src:v(562)}}),t._v(" "),i("img",{staticStyle:{zoom:"67%"},attrs:{src:v(563)}}),t._v(" "),i("p",[t._v("除此之外他们还讨论了一些局限性，包括支持 C++ 编译的二进制、进一步优化、Asan-retrowrite 的局限性以及混淆相关的问题。")]),t._v(" "),i("p",[t._v("这篇文章是我沿着 BinRec 的参考文献找到的。总的来说，相比于之前介绍的 "),i("RouterLink",{attrs:{to:"/2020/1229.html"}},[t._v("BinRec")]),t._v("，RetroWrite 似乎更专注于支持已有的二进制分析工具。不过现在看来，BinRec 做的更好一些，因为 RetroWrite 只支持 PIC 的二进制，而 BinRec 则支持得更广泛。")],1),t._v(" "),i("ul",[i("li",[t._v("PDF: "),i("a",{attrs:{href:"https://hexhive.epfl.ch/publications/files/20Oakland.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hexhive.epfl.ch/publications/files/20Oakland.pdf"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("video: "),i("a",{attrs:{href:"https://www.youtube.com/watch?v=VdT_0jPr00U",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.youtube.com/watch?v=VdT_0jPr00U"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("source code: "),i("a",{attrs:{href:"https://github.com/HexHive/retrowrite",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/HexHive/retrowrite"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("slide: "),i("a",{attrs:{href:"http://nebelwelt.net/publications/files/19CCC-presentation.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://nebelwelt.net/publications/files/19CCC-presentation.pdf"),i("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=_.exports}}]);