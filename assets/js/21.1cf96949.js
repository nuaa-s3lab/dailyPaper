(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{612:function(t,v,e){t.exports=e.p+"assets/img/1.1e08811f.png"},613:function(t,v,e){t.exports=e.p+"assets/img/2.8a5ade82.png"},614:function(t,v,e){t.exports=e.p+"assets/img/3.136a2e05.png"},615:function(t,v,e){t.exports=e.p+"assets/img/5.6687da4d.png"},616:function(t,v,e){t.exports=e.p+"assets/img/6.92bd346e.png"},617:function(t,v,e){t.exports=e.p+"assets/img/7.065d3fe4.png"},618:function(t,v,e){t.exports=e.p+"assets/img/8.b3bb117a.png"},684:function(t,v,e){"use strict";e.r(v);var r=e(6),s=Object(r.a)({},(function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("大家好，今天我为大家带来了来自 "),r("em",[t._v("ACSAC 2019")]),t._v(" 的《VPS: Excavating High-Level C++ Constructs from Low-Level Binaries to Protect Dynamic Dispatching》。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(612),alt:""}})]),t._v(" "),r("p",[t._v("多态性（polymorphism）和继承性（inheritance）使得 C++ 适合编写复杂的软件，但是其实现依赖虚拟函数表。虚拟函数表包含函数指针，攻击者可以对其进行劫持。在本文中，作者们提出了虚表指针分离（VTable Pointer Separation, VPS），与之前的二进制防御依赖于不可靠的静态分析将类与虚拟调用点（virtual callsite）匹配不同，他们将虚拟调用点限制为有效创建的对象实现更精确的保护，")]),t._v(" "),r("p",[t._v("而现在基于控制流完整性的解决方案少有面向 C++ 的，而且很多程序没有提供源代码，因此他们提出了一种针对 vtable 劫持攻击的二进制级防御方法。")]),t._v(" "),r("p",[t._v("他们的贡献如下")]),t._v(" "),r("ul",[r("li",[t._v("提出了针对虚表劫持的二进制防御 vps")]),t._v(" "),r("li",[t._v("开发了一种处理 C++ 调用点识别中的误报的插桩方法")]),t._v(" "),r("li",[t._v("实验效果：和源码级别的 VTV 和 CFIXX 虚拟调用点数量几乎相同，还发现了导致 VTV（gcc 的一部分）中假阴性的概念问题")])]),t._v(" "),r("details",{staticClass:"custom-block details"},[r("summary",[t._v("二进制级别的 C++")]),t._v(" "),r("p",[r("strong",[t._v("虚函数表")])]),t._v(" "),r("p",[t._v("本文将指向 vtable 的指针称为 "),r("code",[t._v("vtblptr")]),t._v("，指向对象的指针称为 "),r("code",[t._v("thisptr")]),t._v("。下图就是高级语言中的虚表和二进制中虚表的实现样例。")]),t._v(" "),r("img",{staticStyle:{zoom:"67%"},attrs:{src:e(613)}}),t._v(" "),r("p",[r("strong",[t._v("C++ 对象的初始化和析构")])]),t._v(" "),r("p",[t._v("在对象实例化期间，vtblptr 由构造函数写入对象。上图的下半部分描述了二进制级别的对象的内存布局。vtblptr 位于对象的开始位置，偏移量为 0x0。对于具有多重继承的类，构造函数还将 vtblptr 初始化为"),r("em",[t._v("子")]),t._v(" vtable。此外，程序员可以在构造函数中初始化特定于类的字段。这些字段位于 vtblptr 之后，如果有多重继承的话则位于子 vtblptr 之后。")]),t._v(" "),r("p",[t._v("对于具有一个或多个基类的类，基类的构造函数在派生类的初始化代码之前被调用。因此基类把它的 vtblptr 放入对象中，该对象随后被派生类的 vtblptr 覆盖。根据优化级别还会构造内联函数，可能会使检测构造函数的二进制分析变得复杂。而析构的过程与初始化类似，不过顺序相反。")]),t._v(" "),r("p",[t._v("抽象类则是另一种特殊情况：尽管程序员不能实例化抽象类，尽管其 vtable 包含 "),r("code",[t._v("pure_virtual")]),t._v(" 项，编译器仍然可以发出代码，将抽象类的 vtblptr 写入对象中。但是只有在创建或释放派生类的对象时才会发生这种情况，并且抽象类的 vtblptr 会被立即覆盖。")]),t._v(" "),r("p",[r("strong",[t._v("C++ 虚函数调度")])]),t._v(" "),r("p",[t._v("因为类可以覆盖虚函数，编译器无法在编译时确定调用目标，因此发出的二进制代码使用对象的 vtable 进行间接函数调用。这被称作虚函数调用（virtual function call, vcall）。在 Itanium C++ ABI 中，编译器发出的结构如下。")]),t._v(" "),r("div",{staticClass:"language-nasm extra-class"},[r("pre",{pre:!0,attrs:{class:"language-nasm"}},[r("code",[t._v("mov "),r("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("RDI")]),t._v(", thisptr\ncall "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("[")]),t._v("vtblptr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" offset"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("]")]),t._v("\n")])])]),r("p",[r("code",[t._v("thisptr")]),t._v(" 是一个隐式调用参数，故被移入到 rdi 中（按照 Linux x86-64 的规范）。接下来，call 指令使用 vtblptr 从对象的 vtable 中获取目标地址。添加到 vtblptr 的 offset 会选择正确的 vtable entry。由于 offset 是一个常数，因此在继承自同一基类的所有 vtable 中，相应的虚函数的入口点（entry）的偏移必须相同。")]),t._v(" "),r("p",[r("strong",[t._v("VTable 劫持攻击模型")])]),t._v(" "),r("p",[t._v("在 C++ 虚方法的实现中，每个带有虚拟方法的对象都包含指向虚函数表的指针，这个表存储了所有类的虚拟函数的地址。为了调用虚拟函数，编译器会通过对应的 vtable entry（虚拟调用点）插入一个间接调用。攻击者可以使用内存漏洞覆盖 vtable 指针，劫持控制流。")])]),t._v(" "),r("p",[t._v("作者们观察到 vtblptr 仅在对象初始化和析构时写入，而在这两者之间的更改都是不合法的。因此只有构造函数（或析构函数）写入的 vtblptr 是有效值。如果 vtblptr 在对象创建和析构之间发生更改，那就是在进行 vtable 劫持攻击。因为这些攻击针对的是虚拟调用点，因此只要在每个虚拟调用点处检查最初写入对象的 vtblptr 是否仍然存在于那个位置就可以了。")]),t._v(" "),r("p",[t._v("下图中，左边是应用程序未保护的情况，右边是经由 VPS 保护的情况。在对象初始化时，VPS 将 vtblptr 存储在安全的内存区域中。在 vcall 之前，它将检查对象的 vtblptr 和存储在安全区域的 vtblptr 是否相同。对于析构函数也可以这样做。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(614),alt:""}})]),t._v(" "),r("p",[t._v("与允许在虚拟函数调度时使用一组特定的高估类的虚拟调用点的纯二进制防御不同，VPS 在对象的初始化点和可达的 vcall 之间有直接映射。")]),t._v(" "),r("p",[t._v("尽管他们的想法与 "),r("a",{attrs:{href:"https://github.com/HexHive/CFIXX",target:"_blank",rel:"noopener noreferrer"}},[t._v("CFIXX"),r("OutboundLink")],1),t._v(" 类似，但是对二进制这样的保护会遇到很多问题。他们将总过程分为三部分")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("vtable 标识")]),t._v(" 通过五种方法标识 vtable 的起始位置，并讨论了抽象类和多重继承的情况。")]),t._v(" "),r("li",[r("strong",[t._v("vtable 指针写入")])]),t._v(" "),r("li",[r("strong",[t._v("虚拟调用点标识")]),t._v(" 通过两阶段的方法区分 vall 和普通 C 风格的间接调用指令，还讨论了在标识的过程中可能遇到的假阳性问题。")])]),t._v(" "),r("p",[t._v("VPS 通过上面的方法收集了所需的信息之后，对应用程序进行检测，对每个对象初始化和析构之间以及 vcall 处检测虚拟调用点。")]),t._v(" "),r("p",[t._v("作者们将 VPS 的静态分析集成到 Marx 框架中，通过 IDAPython 进行 vtable 识别和 CFG 提取。使用 Pin 进行动态分析。VPS 的 runtime 组件构建在 Dyninst 之上。")]),t._v(" "),r("p",[t._v("在实现之后，作者们对若干专有软件（检查是否能处理）和开源软件（进行比较实验）进行了大量实验以验证对 vcall 识别的能力，并与 CFIXX 进行了对比。")]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:e(615)}}),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:e(616)}}),t._v(" "),r("p",[t._v("除此之外，作者们还检测了在 VPS 处理之后对象初始化和销毁的准确性以及处理后程序的性能。")]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:e(617)}}),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:e(618)}}),t._v(" "),r("p",[t._v("总的来说 VPS 限制了针对面向对象的编程（Counterfeit Object-oriented Programming, COOP）攻击的三个组件：对象的创建、数据的传输以及循环 gadget 的选择。")]),t._v(" "),r("ul",[r("li",[t._v("PDF: "),r("a",{attrs:{href:"http://syssec.mistakenot.net/papers/acsac-2019.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://syssec.mistakenot.net/papers/acsac-2019.pdf"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("source code: "),r("a",{attrs:{href:"https://github.com/RUB-SysSec/VPS",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/RUB-SysSec/VPS"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=s.exports}}]);