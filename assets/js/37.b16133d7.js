(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{684:function(t,a,i){t.exports=i.p+"assets/img/image-20210123213049638.ea61496d.png"},685:function(t,a,i){t.exports=i.p+"assets/img/image-20210123191434027.4492613c.png"},686:function(t,a,i){t.exports=i.p+"assets/img/image-20210123211303741.d6950dfa.png"},687:function(t,a,i){t.exports=i.p+"assets/img/image-20210123211609012.e487fbaf.png"},751:function(t,a,i){"use strict";i.r(a);var e=i(6),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("大家好，今天为大家带来了发表在 NDSS 2019 的工作《DroidCap: OS Support for Capability-based Permissions in Android》，他们提出将基于UID的权限分配转变为基于对象的 capability\n"),e("img",{staticStyle:{zoom:"50%"},attrs:{src:i(684),alt:"image-20210123213049638"}})]),t._v(" "),e("p",[t._v("目前android权限机制的问题：应用程序UID作为环境权限。App中的组件和app UID对应的权限相同，但是由于编码人员的疏忽导致组件变得易受攻击或者组件本身就带有不受信任的程序，这些组件就成为信息泄露的入口。")]),t._v(" "),e("img",{staticStyle:{zoom:"33%"},attrs:{src:i(685),alt:"image-20210123191434027"}}),t._v(" "),e("p",[t._v("​\t目前通用的预防措施是将应用程序划分成多块并做权限分离，但是现有的工作的和缺点有如下两条：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在app中加入权限管理的模块来控制权限的分配，但是权限管理模块本身也会受到攻击；")])]),t._v(" "),e("li",[e("p",[t._v("将app拆分成多个子app并且每个子app使用不同UID，但是这样用户手机中会存放很多小的app，用户对app的管理会非常麻烦。")])])]),t._v(" "),e("p",[t._v("他们提出将基于UID的权限分配转变为基于对象的 capability。在基于对象的 capability的系统中，一个进程只能使用他们 capability内的对象，并且进程只能通过授权接口获得 capability，授权接口只会不多不少得向进程发布 capability。除此之外，权限可以很容易地在进程或保护域之间传递，但权限传递会受到监视器的约束。例如，一个对于一个文件f,f具有r,w,x三种权限，当且仅当一个进程持有f文件w的 capability的时候该进程才能修改该文件。")]),t._v(" "),e("h1",{attrs:{id:"系统结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统结构"}},[t._v("#")]),t._v(" 系统结构")]),t._v(" "),e("p",[t._v("​\t"),e("strong",[t._v("Binder capability的表示")]),t._v("：Binder handle是一个令牌，它满足对象 capability的基本要求：不可伪造、可通信、指定资源和唯一地分配给进程。DROIDCAP将Binder handler用作进程的对象 capability，并扩展其数据结构以携带额外的 capability字段。此外，还添加了一个parent proc字段，它指向将此Binder references委托给当前持有者的进程，以及表示委托约束的委托标志。Binder capability是由内核的进程管理机制提供的（类似于文件描述符或SELinux安全上下文）并且进程总是从一组空的Binder capability开始，并在运行时逐渐接收新的 capability。这些 capability这是独立于PID的，这是每个进程的 capability管理，而不是每个PID的权限管理。")]),t._v(" "),e("p",[t._v("​\t"),e("strong",[t._v("Binder capability的创建：")])]),t._v(" "),e("p",[t._v("​\t  DROIDCAP必须解决的挑战是保持Binder capability中的访问权限与app权限之间的同步，这样应用程序权限的任何更改都会反映在应用程序进程所持有的 capability的访问权限中。由于权限由PMS管理，droidcap必须依赖此服务来检索每个应用程序的权限。但是，有了Binder capability， capability创建就不能与访问权限的references分离，因为Binder capability附加到Binder references，而Binder references仅在通过Binder IPC传递相应的Binder对象或该对象的handler时创建。为了解决这个问题，他们利用Contex Manager(CM)和Activity Manager Service (AMS)的中心作用，将Binder  references分发给应用程序进程。它们形成了受信任的系统组件，这些组件是唯一个能够拥有对进程授权Binder capability的权利。他们在PackageManagerService(PMS)和CM之间创建了一个通道，以便在授予或撤销所有应用程序的权限时将其提供给CM。每当CM应将Binder handler分发给调用进程时，CM将使用此信息从该handler创建Binder capability，然后返回该Binder capability。该 capability允许该进程向 references的服务发送IPC消息，该服务将使用该 capability信息来实施访问控制。同样，AMS负责分发Content Providers和非系统服务的Binder handler。")]),t._v(" "),e("p",[t._v("​\t**受控委托：**必须控制Binder功能的委托，以避免进程持有未经授权的访问权限。同时，D-ROID cap也支持不同的委托路径，并且考虑Binder框架的技术复杂性。")]),t._v(" "),e("p",[t._v("​\t**撤销：**为了支持stock Android的动态权限，用户可以在运行时撤销app的权限，DROIDCAP支持在运行时撤销和降级访问权限。在stock Android中，当权限设置发生变化时，应用程序的进程会被终止。当进程死亡时，Binder capability从内核中移除，并且在进程重新启动时必须再次请求Binder capability，并对权限的更改进行编码。")]),t._v(" "),e("p",[t._v("​\t**调用：**从开发人员的角度来看，调用Binder capability与调用常规Binder handler是相同的。但是，在将请求传递给目标进程之前，Binder driver还将调用者的访问权限和调用者capability中的委托URI注入到事务数据中。目标进程（例如，系统服务或内容提供者）可以使用两个新的API方法getCallingRights和getCallingDelegatedURIs来检查调用进程的权限。并且由于getSystemService和getContentResolver是检索系统服务和内容提供者的绑定句柄的唯一方法，因此可以保证这些权限是由系统授权的。")]),t._v(" "),e("h1",{attrs:{id:"系统评估"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统评估"}},[t._v("#")]),t._v(" 系统评估")]),t._v(" "),e("p",[t._v("时间上D-ROI cap平均为事务带来3.44%的延迟。6.15%的事务包含Binder handles，10.67%的事务包含Binder nodes ，这两者都需要驱动程序进行更多的处理。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:i(686),alt:"image-20210123211303741"}}),t._v(" "),e("p",[t._v("​\t以URI权限为例，调用Binder capability时将字符串权限复制到被调用方的TLS所产生的额外开销会较大。一般来说，这是一个昂贵的操作，随着委托URI数量的增加，会产生线性增加的开销（斜率=0.0142）。")]),t._v(" "),e("img",{staticStyle:{zoom:"33%"},attrs:{src:i(687),alt:"image-20210123211609012"}}),t._v(" "),e("p",[t._v("​\t他们改进了一个名为Kontalk的开源消息传递应用程序，以使用Binder capability。该应用程序要求24个权限，其中11个是危险的，它可以访问互联网。该应用程序由37个组件组成，包括大约30个第三方库。他们发现37个组件中有17个不需要任何许可。其他20个组件每个组件需要1到8个权限。这是一个违反最小特权的恰当例子，因为在stock android上的正常执行中，每个组件和库都继承所有授予的权限。在将Kontalk改造为使用Binder capability之后，每个组件都以最少的权限运行。")]),t._v(" "),e("ul",[e("li",[t._v("论文："),e("a",{attrs:{href:"https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_01A-3_Dawoud_paper.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_01A-3_Dawoud_paper.pdf"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("ppt："),e("a",{attrs:{href:"https://www.ndss-symposium.org/wp-content/uploads/ndss2019_01A-3_Dawoud_slides.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.ndss-symposium.org/wp-content/uploads/ndss2019_01A-3_Dawoud_slides.pdf"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("视频："),e("a",{attrs:{href:"https://www.youtube.com/watch?v=e95bOAGt82c&index=4&t=28s&list=PLfUWWM-POgQtqI0XS1ab-kNdY-LLht3V_",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.youtube.com/watch?v=e95bOAGt82c&index=4&t=28s&list=PLfUWWM-POgQtqI0XS1ab-kNdY-LLht3V_"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);